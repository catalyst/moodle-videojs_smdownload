{"version":3,"sources":["../src/smdownload.js"],"names":["define","videojs","MenuButton","getComponent","MenuItem","defaults","beforeElement","textControl","DownloadMenuItem","player","options","window","location","options_","file","DownloadMenuButton","items","player_","hasOwnProperty","audioDownload","label","push","videoDownload","onPlayerReady","DMButton","controlBar","addChild","controlText","el","insertBefore","getChild","addClass","registerPlugin","smdownload","ready","mergeOptions"],"mappings":"+1DAsBAA,OAAM,iCAAC,CAAC,0BAAD,CAAD,CAA+B,SAASC,CAAT,CAAkB,IAG7CC,CAAAA,CAAU,CAAGD,CAAO,CAACE,YAAR,CAAqB,YAArB,CAHgC,CAI7CC,CAAQ,CAAGH,CAAO,CAACE,YAAR,CAAqB,UAArB,CAJkC,CAO7CE,CAAQ,CAAG,CACfC,aAAa,CAAE,kBADA,CAEfC,WAAW,CAAE,UAFE,CAPkC,CAiB7CC,CAjB6C,4BAsB/C,WAAYC,CAAZ,CAAoBC,CAApB,CAA6B,6FACrBD,CADqB,CACbC,CADa,EAE5B,CAxB8C,+DA0BjC,CACZ,iEACAC,MAAM,CAACC,QAAP,CAAkB,KAAKC,QAAL,CAAcC,IACjC,CA7B8C,cAiBpBV,CAjBoB,EAqC7CW,CArC6C,4BA0C/C,WAAYN,CAAZ,CAAoBC,CAApB,CAA6B,6FACrBD,CADqB,CACbC,CADa,EAE5B,CA5C8C,mEAqD9B,CACd,kGACD,CAvD6C,iDAgEtB,IAAZM,CAAAA,CAAY,wDAAJ,EAAI,CAEpB,GAAI,KAAKC,OAAL,CAAaJ,QAAb,CAAsBK,cAAtB,CAAqC,qBAArC,CAAJ,CAAiE,CAC7D,GAAMC,CAAAA,CAAa,CAAG,CACdC,KAAK,CAAE,aADO,CAEdN,IAAI,CAAE,KAAKG,OAAL,CAAaJ,QAAb,CAAsB,qBAAtB,CAFQ,CAAtB,CAIAG,CAAK,CAACK,IAAN,CAAW,GAAIb,CAAAA,CAAJ,CAAqB,KAAKS,OAA1B,CAAmCE,CAAnC,CAAX,CACH,CAGD,GAAI,KAAKF,OAAL,CAAaJ,QAAb,CAAsBK,cAAtB,CAAqC,qBAArC,CAAJ,CAAiE,CAC7D,GAAMI,CAAAA,CAAa,CAAG,CACdF,KAAK,CAAE,aADO,CAEdN,IAAI,CAAE,KAAKG,OAAL,CAAaJ,QAAb,CAAsB,qBAAtB,CAFQ,CAAtB,CAIAG,CAAK,CAACK,IAAN,CAAW,GAAIb,CAAAA,CAAJ,CAAqB,KAAKS,OAA1B,CAAmCK,CAAnC,CAAX,CACH,CAED,MAAON,CAAAA,CACR,CApF2C,cAqClBd,CArCkB,EAiG7CqB,CAAa,CAAG,SAACd,CAAD,CAASC,CAAT,CAAqB,CACzC,GAAIc,CAAAA,CAAQ,CAAGf,CAAM,CAACgB,UAAP,CAAkBC,QAAlB,CAA2B,GAAIX,CAAAA,CAAJ,CAAuBN,CAAvB,CAA+BC,CAA/B,CAA3B,CAAoE,EAApE,CAAf,CAEAc,CAAQ,CAACG,WAAT,CAAqBjB,CAAO,CAACH,WAA7B,EAEAE,CAAM,CAACgB,UAAP,CAAkBG,EAAlB,GAAuBC,YAAvB,CAAoCL,CAAQ,CAACI,EAAT,EAApC,CACEnB,CAAM,CAACgB,UAAP,CAAkBK,QAAlB,CAA2BpB,CAAO,CAACJ,aAAnC,EAAkDsB,EAAlD,EADF,EAGAnB,CAAM,CAACsB,QAAP,CAAgB,gBAAhB,CACD,CA1GkD,CAgInD9B,CAAO,CAAC+B,cAAR,CAAuB,YAAvB,CAXmB,QAAbC,CAAAA,UAAa,CAASvB,CAAT,CAAkB,YAGjC,GAAK,KAAKG,QAAL,CAAcK,cAAd,CAA6B,qBAA7B,CAAD,EAA0D,KAAKL,QAAL,CAAcK,cAAd,CAA6B,qBAA7B,CAA9D,CAAoH,CAChH,KAAKgB,KAAL,CAAW,UAAM,CACbX,CAAa,CAAC,CAAD,CAAOtB,CAAO,CAACkC,YAAR,CAAqB9B,CAArB,CAA+BK,CAA/B,CAAP,CAChB,CAFD,CAGH,CACJ,CAGD,CAEH,CAlIK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VideoJS smdownload plugin.\n *\n * @package    videojs_smdownload\n * @copyright  2019 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['media_videojs/video-lazy'], function(videojs) {\n\n    // Get menu button component.\n    const MenuButton = videojs.getComponent('MenuButton');\n    const MenuItem = videojs.getComponent('MenuItem');\n\n    // Default options for the plugin.\n    const defaults = {\n      beforeElement: 'fullscreenToggle',\n      textControl: 'Download',\n    };\n\n\n    /**\n     * Download menu item class.\n     * Responsible for adding menu items to the menu button.\n     */\n    class DownloadMenuItem extends MenuItem {\n\n        /**\n         * Class constructor.\n         */\n        constructor(player, options) {\n          super(player, options);\n        }\n\n        handleClick() {\n          super.handleClick();\n          window.location = this.options_.file;\n        }\n\n      }\n\n    /**\n     * Download menu button class.\n     * Adds download menu button to the VideoJS player UI.\n     */\n    class DownloadMenuButton extends MenuButton {\n\n        /**\n         * Class constructor.\n         */\n        constructor(player, options) {\n          super(player, options);\n        }\n\n        /**\n         * Allow sub components to stack CSS class names,\n         * required to get the menubar button styling working.\n         *\n         * @return {String} The constructed class name.\n         * @method buildCSSClass\n         */\n         buildCSSClass() {\n           return `vjs-smdownload ${super.buildCSSClass()}`;\n         }\n\n         /**\n          * Add the menu items.\n          *\n          * @mthod createItems\n          * @param {Array} items Existing items.\n          * @return {Array} items This items to add.\n          */\n         createItems(items = []) {\n             // Audio download.\n             if (this.player_.options_.hasOwnProperty('data-download-audio')) {\n                 const audioDownload = {\n                         label: 'Audio (mp3)',\n                         file: this.player_.options_[\"data-download-audio\"]\n                 };\n                 items.push(new DownloadMenuItem(this.player_, audioDownload));\n             }\n\n             // Video download.\n             if (this.player_.options_.hasOwnProperty('data-download-video')) {\n                 const videoDownload = {\n                         label: 'Video (mp4)',\n                         file: this.player_.options_[\"data-download-video\"]\n                 };\n                 items.push(new DownloadMenuItem(this.player_, videoDownload));\n             }\n\n             return items;\n           }\n    }\n\n    /**\n     * Function invoked when the player is ready.\n     * When this function is called, the player will have its DOM and child components\n     * in place.\n     * Here we add the download menu.\n     *\n     * @function onPlayerReady\n     * @param    {Player} player\n     * @param    {Object} [options={}]\n     */\n    const onPlayerReady = (player, options) => {\n      let DMButton = player.controlBar.addChild(new DownloadMenuButton(player, options), {});\n\n      DMButton.controlText(options.textControl);\n\n      player.controlBar.el().insertBefore(DMButton.el(),\n        player.controlBar.getChild(options.beforeElement).el());\n\n      player.addClass('vjs-smdownload');\n    };\n\n    /**\n     * Entry point for the smartmedia download plugin.\n     * In the plugin function, the value of `this` is a video.js `Player` instance.\n     * Function gets sets up the UI menu if there is download media available.\n     *\n     * @function smdownload\n     * @param    {Object} [options={}]\n     *           An object of options left to the plugin author to define.\n     */\n    const smdownload = function(options) {\n        // Once player is ready set everything up, but only if we have\n        // at least one download file available.\n        if ((this.options_.hasOwnProperty('data-download-audio')) || (this.options_.hasOwnProperty('data-download-video'))) {\n            this.ready(() => {\n                onPlayerReady(this, videojs.mergeOptions(defaults, options));\n            });\n        }\n    };\n\n    // Register the plugin with video.js.\n    videojs.registerPlugin('smdownload', smdownload);\n\n});\n"],"file":"smdownload.min.js"}